{
  const {
    CSSDeclListExpression,
    CSSDeclCallExpression,
    CSSDeclColorExpression,
    CSSDeclDegreeExpression,
    CSSDeclNumberExpression,
    CSSDeclLiteralExpression,
    CSSDeclSpaceListExpression,
    CSSDeclCommaListExpression,
    CSSDeclIdentifierExpression,
    CSSDeclMeasurementExpression,
  } = require("./ast");
}

Start
  = list: CommaList {
    return list.items.length === 1 ? list.items[0] : list;
  }

CommaList 
  = first: SpaceList rest: CommaListRest* {
    return new CSSDeclCommaListExpression([first].concat(rest), location());
  }

SpaceList 
  = first: Expression rest: SpaceListRest* {
    return new CSSDeclSpaceListExpression([first].concat(rest), location());
  }

CommaListRest
  = "," _ expr: SpaceList {
    return expr;
  }

SpaceListRest
  = " " expr: Expression {
    return expr;
  }

Expression 
  = Degree/Measurement/Number/Color/String/Call/Identifier

Measurement 
  = number: Number unit: [a-zA-Z%]+ {
    return new CSSDeclMeasurementExpression(number.value, unit.join(""), location());
  }

Degree 
  = number: Number "deg" {
    return new CSSDeclDegreeExpression(number.value, location());
  }

Color 
  = "#" color: [a-zA-Z0-9]+ {
    return new CSSDeclColorExpression(text(), location());
  }

Call
  = id: Identifier "(" _ params: CommaList? _ ")" {
    return new CSSDeclCallExpression(id, params ? params.items : [], location());
  }

Identifier 
  = [^ \(\),]+ {
    return new CSSDeclIdentifierExpression(text(), location());
  }

Number 
  = "-"?("."[0-9]+/[0-9]+("."[0-9]+)?) {
    return new CSSDeclLiteralExpression(Number(text()), location());
  }

String
  = '"' characters:DoubleStringCharacter* '"' { return new CSSDeclLiteralExpression(characters.join(""), location()); }
  / "'" characters:SingleStringCharacter* "'" { return new CSSDeclLiteralExpression(characters.join(""), location()); }


DoubleStringCharacter
  = !('"' / "\\") . { return text(); }
  / '\\"'

SingleStringCharacter
  = !("'" / "\\") . { return text(); }
  / "\\'"

_
  = [ \n\r\t]*